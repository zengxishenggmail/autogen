<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>AutoGen Blog</title>
        <link>https://microsoft.github.io/autogen/blog</link>
        <description>AutoGen Blog</description>
        <lastBuildDate>Fri, 14 Jul 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Use AutoGen for Local LLMs]]></title>
            <link>https://microsoft.github.io/autogen/blog/2023/07/14/Local-LLMs</link>
            <guid>Use AutoGen for Local LLMs</guid>
            <pubDate>Fri, 14 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[TL;DR:]]></description>
            <content:encoded><![CDATA[<p><strong>TL;DR:</strong>
We demonstrate how to use autogen for local LLM application. As an example, we will initiate an endpoint using <a href="https://github.com/lm-sys/FastChat">FastChat</a> and perform inference on <a href="https://github.com/THUDM/ChatGLM2-6B">ChatGLMv2-6b</a>.</p><h2>Preparations</h2><h3>Clone FastChat</h3><p>FastChat provides OpenAI-compatible APIs for its supported models, so you can use FastChat as a local drop-in replacement for OpenAI APIs. However, its code needs minor modification in order to function properly.</p><pre><code class="language-bash">git clone https://github.com/lm-sys/FastChat.git
cd FastChat
</code></pre><h3>Download checkpoint</h3><p>ChatGLM-6B is an open bilingual language model based on General Language Model (GLM) framework, with 6.2 billion parameters. ChatGLM2-6B is its second-generation version.</p><p>Before downloading from HuggingFace Hub, you need to have Git LFS <a href="https://docs.github.com/en/repositories/working-with-files/managing-large-files/installing-git-large-file-storage">installed</a>.</p><pre><code class="language-bash">git clone https://huggingface.co/THUDM/chatglm2-6b
</code></pre><h2>Initiate server</h2><p>First, launch the controller</p><pre><code class="language-bash">python -m fastchat.serve.controller
</code></pre><p>Then, launch the model worker(s)</p><pre><code class="language-bash">python -m fastchat.serve.model_worker --model-path chatglm2-6b
</code></pre><p>Finally, launch the RESTful API server</p><pre><code class="language-bash">python -m fastchat.serve.openai_api_server --host localhost --port 8000
</code></pre><p>Normally this will work. However, if you encounter error like <a href="https://github.com/lm-sys/FastChat/issues/1641">this</a>, commenting out all the lines containing <code>finish_reason</code> in <code>fastchat/protocol/api_protocal.py</code> and <code>fastchat/protocol/openai_api_protocol.py</code> will fix the problem. The modified code looks like:</p><pre><code class="language-python">class CompletionResponseChoice(BaseModel):
    index: int
    text: str
    logprobs: Optional[int] = None
    # finish_reason: Optional[Literal[&quot;stop&quot;, &quot;length&quot;]]

class CompletionResponseStreamChoice(BaseModel):
    index: int
    text: str
    logprobs: Optional[float] = None
    # finish_reason: Optional[Literal[&quot;stop&quot;, &quot;length&quot;]] = None
</code></pre><h2>Interact with model using <code>oai.Completion</code></h2><p>Now the models can be directly accessed through openai-python library as well as <code>autogen.oai.Completion</code> and <code>autogen.oai.ChatCompletion</code>.</p><pre><code class="language-python">from autogen import oai

# create a text completion request
response = oai.Completion.create(
    config_list=[
        {
            &quot;model&quot;: &quot;chatglm2-6b&quot;,
            &quot;api_base&quot;: &quot;http://localhost:8000/v1&quot;,
            &quot;api_type&quot;: &quot;open_ai&quot;,
            &quot;api_key&quot;: &quot;NULL&quot;, # just a placeholder
        }
    ],
    prompt=&quot;Hi&quot;,
)
print(response)

# create a chat completion request
response = oai.ChatCompletion.create(
    config_list=[
        {
            &quot;model&quot;: &quot;chatglm2-6b&quot;,
            &quot;api_base&quot;: &quot;http://localhost:8000/v1&quot;,
            &quot;api_type&quot;: &quot;open_ai&quot;,
            &quot;api_key&quot;: &quot;NULL&quot;,
        }
    ],
    messages=[{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hi&quot;}]
)
print(response)
</code></pre><p>If you would like to switch to different models, download their checkpoints and specify model path when launching model worker(s).</p><h2>interacting with multiple local LLMs</h2><p>If you would like to interact with multiple LLMs on your local machine, replace the <code>model_worker</code> step above with a multi model variant:</p><pre><code class="language-bash">python -m fastchat.serve.multi_model_worker \
    --model-path lmsys/vicuna-7b-v1.3 \
    --model-names vicuna-7b-v1.3 \
    --model-path chatglm2-6b \
    --model-names chatglm2-6b
</code></pre><p>The inference code would be:</p><pre><code class="language-python">from autogen import oai

# create a chat completion request
response = oai.ChatCompletion.create(
    config_list=[
        {
            &quot;model&quot;: &quot;chatglm2-6b&quot;,
            &quot;api_base&quot;: &quot;http://localhost:8000/v1&quot;,
            &quot;api_type&quot;: &quot;open_ai&quot;,
            &quot;api_key&quot;: &quot;NULL&quot;,
        },
        {
            &quot;model&quot;: &quot;vicuna-7b-v1.3&quot;,
            &quot;api_base&quot;: &quot;http://localhost:8000/v1&quot;,
            &quot;api_type&quot;: &quot;open_ai&quot;,
            &quot;api_key&quot;: &quot;NULL&quot;,
        }
    ],
    messages=[{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hi&quot;}]
)
print(response)
</code></pre><h2>For Further Reading</h2><ul><li><a href="/docs/Getting-Started">Documentation</a> about <code>autogen</code>.</li><li><a href="https://github.com/lm-sys/FastChat">Documentation</a> about FastChat.</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[MathChat - An Conversational Framework to Solve Math Problems]]></title>
            <link>https://microsoft.github.io/autogen/blog/2023/06/28/MathChat</link>
            <guid>MathChat - An Conversational Framework to Solve Math Problems</guid>
            <pubDate>Wed, 28 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[MathChat WorkFlow]]></description>
            <content:encoded><![CDATA[<p><img src="img/mathchatflow.png" alt="MathChat WorkFlow"/>
<strong>TL;DR:</strong></p><ul><li><strong>We introduce MathChat, a conversational framework leveraging Large Language Models (LLMs), specifically GPT-4, to solve advanced mathematical problems.</strong></li><li><strong>MathChat improves LLM&#x27;s performance on challenging math problem-solving, outperforming basic prompting and other strategies by about 6%. The improvement was especially notable in the Algebra category, with a 15% increase in accuracy.</strong></li><li><strong>Despite the advancement, GPT-4 still struggles to solve very challenging math problems, even with effective prompting strategies. Further improvements are needed, such as the development of more specific assistant models or the integration of new tools and prompts.</strong></li></ul><p>Recent Large Language Models (LLMs) like GTP-3.5 and GPT-4 have demonstrated astonishing abilities over previous models on various tasks, such as text generation, question answering, and code generation. Moreover, these models can communicate with humans through conversations and remember previous contexts, making it easier for humans to interact with them. These models play an increasingly important role in our daily lives assisting people with different tasks, such as writing emails, summarizing documents, and writing code.</p><p>In this blog post, we probe into the problem-solving capabilities of LLMs. Specifically, we are interested in their capabilities to solve advanced math problems, which could be representative of a broader class of problems that require precise reasoning and also have deterministic solutions.</p><p>We introduce MathChat, a conversational framework designed for solving challenging math problems with LLMs. This framework takes advantage of the chat-optimized feature of state-of-the-art LLMs, where a user proxy agent and an LLM assistant work together to tackle math problems. We also test previous prompting techniques for comparison.</p><h2>The MathChat Framework</h2><p>MathChat simulates a conversation between the LLM assistant and a user proxy agent. As the name indicates, the user proxy agent acts as a proxy for the user, which is responsible for communicating with the LLM assistant and continuing the conversation in a desired manner.</p><p>The proxy agent first presents a math problem to the LLM assistant, framed by an initial prompt that guides the assistant in how it should work collaboratively to solve the problem. We incorporate existing prompting methods such as CoT (chain-of-thought) and tool-using are incorporated in the initial prompt. Key components of the prompt include:</p><ul><li><p><strong>Tool-using Prompt:</strong> This guides the LLM assistant to use Python code in the correct format to address the problem, allowing the user proxy agent to parse the code and provide the appropriate results.</p></li><li><p><strong>Problem-Solving Strategy Selection Prompt:</strong> The assistant is instructed to choose one of three potential problem-solving strategies, including:</p><ol><li>Writing a Python program to solve the problem directly.</li><li>Solving the problem directly without using Python, which exercises LLMs&#x27; inherent reasoning capabilities.</li><li>Solving the problem step by step with Python. This should be used when the first two strategies aren&#x27;t suitable.</li></ol></li><li><p><strong>Final Answer Encapsulation Prompt:</strong> This part instructs the assistant to put the final answer in <em>\boxed</em>{}.</p></li></ul><p>The prompt design in MathChat is flexible and can easily be refined to include other tools, such as Wolfram Alpha.</p><p>Let&#x27;s take a look at an example between the <strong>User Proxy Agent</strong> and the <strong>LLM Assistant</strong> (GPT-4). The conversation focuses on how to solve inequality using Python.
(The conversation is modified for readability.)</p><table><thead><tr><th>Participant</th><th>Dialogue</th></tr></thead><tbody><tr><td>User Proxy Agent</td><td>(Initial Prompt: Let&#x27;s solve a math problem with Python...) Problem: Find all x that satisfy the inequality (2x+10)(x+3) &lt; (3x+9)(x+8). Express your answer in interval notation.</td></tr><tr><td>LLM assistant</td><td>The key idea to solve this problem is to find the critical points, which are the points where the inequality is equal. Then, test the intervals between the critical points to find the interval for which the inequality holds.</td></tr><tr><td>LLM assistant (continued)</td><td>Here&#x27;s Python code to find the critical points: <code>from sympy import symbols, Eq, solve; x = symbols(&quot;x&quot;); lhs = (2*x + 10)*(x + 3); rhs = (3*x + 9)*(x + 8); equation = Eq(lhs, rhs); critical_points = solve(equation, x); critical_points</code></td></tr><tr><td>User Proxy Agent</td><td>The critical points are: <!-- -->[-14, -3]</td></tr><tr><td>LLM assistant</td><td>We found the critical points to be x = -14 and x = -3. Now we&#x27;ll test the intervals between these critical points as well as points before and after the critical points. The intervals are: x &lt; -14, -14 &lt; x &lt; -3, x &gt; -3.</td></tr><tr><td>LLM assistant (continued)</td><td>Here&#x27;s Python code to test the inequality for each interval: <code>from sympy import symbols; x = symbols(&quot;x&quot;); inequality = (2*x + 10)*(x + 3) &lt; (3*x + 9)*(x + 8); test_points = [-15, -5, 0]; intervals = []; for point in test_points: if inequality.subs(x, point): intervals.append(point); intervals</code></td></tr><tr><td>User Proxy Agent</td><td>The intervals where the inequality holds true are for test points: <!-- -->[-15, 0]</td></tr><tr><td>LLM assistant</td><td>We have tested the intervals and found that the inequality holds for: 1. x &lt; -14 (test point: -15) 2. x &gt; -3 (test point: 0). Therefore, the solution to the inequality (2x+10)(x+3) &lt; (3x+9)(x+8) is x ∈ (-∞, -14) ∪ (-3, ∞)</td></tr></tbody></table><h2>Experiment Setup</h2><p>We evaluate the improvement brought by MathChat.</p><p>For the experiment, we focus on the level-5 problems from the MATH dataset, which are composed of high school competition problems. These problems include the application of theorems and complex equation derivation and are challenging even for undergraduate students. We evaluate 6 of 7 categories from the dataset (excluding Geometry): Prealgebra, Algebra, Number Theory, Counting and Probability, Intermediate Algebra, and Precalculus.</p><p>We evaluate GPT-4 and use the default configuration of the OpenAI API. To access the final performance, we manually compare the final answer with the correct answer.  For the vanilla prompt, Program Synthesis, and MathChat, we have GPT-4 enclose the final answer in <em>\boxed</em>{}, and we take the return of the function in PoT as the final answer.</p><p>We also evaluate the following methods for comparison:</p><ol><li><p><strong>Vanilla prompting:</strong> Evaluates GPT-4&#x27;s direct problem-solving capability. The prompt used is: <em>&quot; Solve the problem carefully. Put the final answer in \boxed{}&quot;</em>.</p></li><li><p><strong>Program of Thoughts (PoT):</strong> Uses a zero-shot PoT prompt that requests the model to create a <em>Solver</em> function to solve the problem and return the final answer.</p></li><li><p><strong>Program Synthesis (PS) prompting:</strong> Like PoT, it prompts the model to write a program to solve the problem. The prompt used is: <em>&quot;Write a program that answers the following question: <!-- -->{<!-- -->Problem<!-- -->}<!-- -->&quot;</em>.</p></li></ol><h2>Experiment Results</h2><p>The accuracy on all the problems with difficulty level-5 from different categories of the MATH dataset with different methods is shown below:</p><p><img src="img/result.png" alt="Result"/></p><p>We found that compared to basic prompting, which demonstrates the innate capabilities of GPT-4, utilizing Python within the context of PoT or PS strategy improved the overall accuracy by about 10%. This increase was mostly seen in categories involving more numerical manipulations, such as Counting &amp; Probability and Number Theory, and in more complex categories like Intermediate Algebra and Precalculus.</p><p>For categories like Algebra and Prealgebra, PoT and PS showed little improvement, and in some instances, even led to a decrease in accuracy. However, MathChat was able to enhance total accuracy by around 6% compared to PoT and PS, showing competitive performance across all categories. Remarkably, MathChat improved accuracy in the Algebra category by about 15% over other methods. Note that categories like Intermediate Algebra and Precalculus remained challenging for all methods, with only about 20% of problems solved accurately.</p><p>The code for experiments can be found at this <a href="https://github.com/kevin666aa/FLAML/tree/gpt_math_solver/flaml/autogen/math">repository</a>.
We now provide an implementation of MathChat using the interactive agents in AutoGen. See this <a href="https://github.com/microsoft/autogen/blob/main/notebook/agentchat_MathChat.ipynb">notebook</a> for example usage.</p><h2>Future Directions</h2><p>Despite MathChat&#x27;s improvements over previous methods, the results show that complex math problem is still challenging for recent powerful LLMs, like GPT-4, even with help from external tools.</p><p>Further work can be done to enhance this framework or math problem-solving in general:</p><ul><li>Although enabling the model to use tools like Python can reduce calculation errors, LLMs are still prone to logic errors. Methods like self-consistency (Sample several solutions and take a major vote on the final answer), or self-verification (use another LLM instance to check whether an answer is correct) might improve the performance.</li><li>Sometimes, whether the LLM can solve the problem depends on the plan it uses. Some plans require less computation and logical reasoning, leaving less room for mistakes.</li><li>MathChat has the potential to be adapted into a copilot system, which could assist users with math problems. This system could allow users to be more involved in the problem-solving process, potentially enhancing learning.</li></ul><h2>For Further Reading</h2><ul><li><a href="https://arxiv.org/abs/2306.01337">Research paper of MathChat</a></li><li><a href="/docs/Getting-Started">Documentation about <code>autogen</code></a></li></ul><p><em>Are you working on applications that involve math problem-solving? Would you appreciate additional research or support on the application of LLM-based agents for math problem-solving? Please join our <a href="https://discord.gg/pAbnFJrkgZ">Discord</a> server for discussion.</em></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Achieve More, Pay Less - Use GPT-4 Smartly]]></title>
            <link>https://microsoft.github.io/autogen/blog/2023/05/18/GPT-adaptive-humaneval</link>
            <guid>Achieve More, Pay Less - Use GPT-4 Smartly</guid>
            <pubDate>Thu, 18 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[An adaptive way of using GPT-3.5 and GPT-4 outperforms GPT-4 in both coding success rate and inference cost]]></description>
            <content:encoded><![CDATA[<p><img src="img/humaneval.png" alt="An adaptive way of using GPT-3.5 and GPT-4 outperforms GPT-4 in both coding success rate and inference cost"/></p><p><strong>TL;DR:</strong></p><ul><li><strong>A case study using the HumanEval benchmark shows that an adaptive way of using multiple GPT models can achieve both much higher accuracy (from 68% to 90%) and lower inference cost (by 18%) than using GPT-4 for coding.</strong></li></ul><p>GPT-4 is a big upgrade of foundation model capability, e.g., in code and math, accompanied by a much higher (more than 10x) price per token to use over GPT-3.5-Turbo. On a code completion benchmark, <a href="https://huggingface.co/datasets/openai_humaneval">HumanEval</a>, developed by OpenAI, GPT-4 can successfully solve 68% tasks while GPT-3.5-Turbo does 46%. It is possible to increase the success rate of GPT-4 further by generating multiple responses or making multiple calls. However, that will further increase the cost, which is already nearly 20 times of using GPT-3.5-Turbo and with more restricted API call rate limit. Can we achieve more with less?</p><p>In this blog post, we will explore a creative, adaptive way of using GPT models which leads to a big leap forward.</p><h2>Observations</h2><ul><li>GPT-3.5-Turbo can alrady solve 40%-50% tasks. For these tasks if we never use GPT-4, we can save nearly 40-50% cost.</li><li>If we use the saved cost to generate more responses with GPT-4 for the remaining unsolved tasks, it is possible to solve some more of them while keeping the amortized cost down.</li></ul><p>The obstacle of leveraging these observations is that we do not know <em>a priori</em> which tasks can be solved by the cheaper model, which tasks can be solved by the expensive model, and which tasks can be solved by paying even more to the expensive model.</p><p>To overcome that obstacle, one may want to predict which task requires what model to solve and how many responses are required for each task. Let&#x27;s look at one example code completion task:</p><pre><code class="language-python">def vowels_count(s):
    &quot;&quot;&quot;Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are &#x27;a&#x27;, &#x27;e&#x27;, &#x27;i&#x27;, &#x27;o&#x27;, &#x27;u&#x27;. Here, &#x27;y&#x27; is also a
    vowel, but only when it is at the end of the given word.

    Example:
    &gt;&gt;&gt; vowels_count(&quot;abcde&quot;)
    2
    &gt;&gt;&gt; vowels_count(&quot;ACEDY&quot;)
    3
    &quot;&quot;&quot;
</code></pre><p>Can we predict whether GPT-3.5-Turbo can solve this task or do we need to use GPT-4? My first guess is that GPT-3.5-Turbo can get it right because the instruction is fairly straightforward. Yet, it turns out that GPT-3.5-Turbo does not consistently get it right, if we only give it one chance. It&#x27;s not obvious (but an interesting research question!) how to predict the performance without actually trying.</p><p>What else can we do? We notice that:
<strong>It&#x27;s &quot;easier&quot; to verify a given solution than finding a correct solution from scratch.</strong></p><p>Some simple example test cases are provided in the docstr. If we already have a response generated by a model, we can use those test cases to filter wrong implementations, and either use a more powerful model or generate more responses, until the result passes the example test cases. Moreover, this step can be automated by asking GPT-3.5-Turbo to generate assertion statements from the examples given in the docstr (a simpler task where we can place our bet) and executing the code.</p><h2>Solution</h2><p>Combining these observations, we can design a solution with two intuitive ideas:</p><ul><li>Make use of auto-generated feedback, i.e., code execution results, to filter responses.</li><li>Try inference configurations one by one, until one response can pass the filter.</li></ul><p><img src="img/design.png" alt="Design"/></p><p>This solution works adaptively without knowing or predicting which task fits which configuration. It simply tries multiple configurations one by one, starting from the cheapest configuration. Note that one configuration can generate multiple responses (by setting the inference parameter n larger than 1). And different configurations can use the same model and different inference parameters such as n and temperature. Only one response is returned and evaluated per task.</p><p>An implementation of this solution is provided in <a href="/docs/reference/code_utils#implement">autogen</a>. It uses the following sequence of configurations:</p><ol><li>GPT-3.5-Turbo, n=1, temperature=0</li><li>GPT-3.5-Turbo, n=7, temperature=1, stop=<!-- -->[&quot;\nclass&quot;, &quot;\ndef&quot;, &quot;\nif&quot;, &quot;\nprint&quot;]</li><li>GPT-4, n=1, temperature=0</li><li>GPT-4, n=2, temperature=1, stop=<!-- -->[&quot;\nclass&quot;, &quot;\ndef&quot;, &quot;\nif&quot;, &quot;\nprint&quot;]</li><li>GPT-4, n=1, temperature=1, stop=<!-- -->[&quot;\nclass&quot;, &quot;\ndef&quot;, &quot;\nif&quot;, &quot;\nprint&quot;]</li></ol><h2>Experiment Results</h2><p>The first figure in this blog post shows the success rate and average inference cost of the adaptive solution compared with default GPT-4.
The inference cost includes the cost for generating the assertions in our solution. The generated assertions are not always correct, and programs that pass/fail the generated assertions are not always right/wrong. Despite of that, the adaptive solution can increase the success rate (referred to as pass@1 in the literature) from 68% to 90%, while reducing the cost by 18%.</p><p>Here are a few examples of function definitions which are solved by different configurations in the portfolio.</p><ol><li>Solved by GPT-3.5-Turbo, n=1, temperature=0</li></ol><pre><code class="language-python">def compare(game,guess):
    &quot;&quot;&quot;I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match.
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.


    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -&gt; [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -&gt; [4,4,1,0,0,6]
    &quot;&quot;&quot;
</code></pre><ol start="2"><li>Solved by GPT-3.5-Turbo, n=7, temperature=1, stop=<!-- -->[&quot;\nclass&quot;, &quot;\ndef&quot;, &quot;\nif&quot;, &quot;\nprint&quot;]<!-- -->: the <code>vowels_count</code> function presented earlier.</li><li>Solved by GPT-4, n=1, temperature=0:</li></ol><pre><code class="language-python">def string_xor(a: str, b: str) -&gt; str:
    &quot;&quot;&quot; Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    &gt;&gt;&gt; string_xor(&#x27;010&#x27;, &#x27;110&#x27;)
    &#x27;100&#x27;
    &quot;&quot;&quot;
</code></pre><ol start="4"><li>Solved by GPT-4, n=2, temperature=1, stop=<!-- -->[&quot;\nclass&quot;, &quot;\ndef&quot;, &quot;\nif&quot;, &quot;\nprint&quot;]<!-- -->:</li></ol><pre><code class="language-python">def is_palindrome(string: str) -&gt; bool:
    &quot;&quot;&quot; Test if given string is a palindrome &quot;&quot;&quot;
    return string == string[::-1]


def make_palindrome(string: str) -&gt; str:
    &quot;&quot;&quot; Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    &gt;&gt;&gt; make_palindrome(&#x27;&#x27;)
    &#x27;&#x27;
    &gt;&gt;&gt; make_palindrome(&#x27;cat&#x27;)
    &#x27;catac&#x27;
    &gt;&gt;&gt; make_palindrome(&#x27;cata&#x27;)
    &#x27;catac&#x27;
    &quot;&quot;&quot;
</code></pre><ol start="5"><li>Solved by GPT-4, n=1, temperature=1, stop=<!-- -->[&quot;\nclass&quot;, &quot;\ndef&quot;, &quot;\nif&quot;, &quot;\nprint&quot;]<!-- -->:</li></ol><pre><code class="language-python">def sort_array(arr):
    &quot;&quot;&quot;
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    &gt;&gt;&gt; sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    &gt;&gt;&gt; sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    &gt;&gt;&gt; sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    &quot;&quot;&quot;
</code></pre><p>The last problem is an example with wrong example test cases in the original definition. It misleads the adaptive solution because a correct implementation is regarded as wrong and more trials are made. The last configuration in the sequence returns the right implementation, even though it does not pass the auto-generated assertions. This example demonstrates that:</p><ul><li>Our adaptive solution has a certain degree of fault tolerance.</li><li>The success rate and inference cost for the adaptive solution can be further improved if correct example test cases are used.</li></ul><p>It is worth noting that the reduced inference cost is the amortized cost over all the tasks. For each individual task, the cost can be either larger or smaller than directly using GPT-4. This is the nature of the adaptive solution: The cost is in general larger for difficult tasks than that for easy tasks.</p><p>An example notebook to run this experiment can be found at: <a href="https://github.com/microsoft/FLAML/blob/v1.2.1/notebook/research/autogen_code.ipynb">https://github.com/microsoft/FLAML/blob/v1.2.1/notebook/research/autogen_code.ipynb</a>. The experiment was run when AutoGen was a subpackage in FLAML.</p><h2>Discussion</h2><p>Our solution is quite simple to implement using a generic interface offered in <a href="/docs/Use-Cases/enhanced_inference#logic-error"><code>autogen</code></a>, yet the result is quite encouraging.</p><p>While the specific way of generating assertions is application-specific, the main ideas are general in LLM operations:</p><ul><li>Generate multiple responses to select - especially useful when selecting a good response is relatively easier than generating a good response at one shot.</li><li>Consider multiple configurations to generate responses - especially useful when:<ul><li>Model and other inference parameter choice affect the utility-cost tradeoff; or</li><li>Different configurations have complementary effect.</li></ul></li></ul><p>A <a href="/blog/2023/04/21/LLM-tuning-math">previous blog post</a> provides evidence that these ideas are relevant in solving math problems too.
<code>autogen</code> uses a technique <a href="https://arxiv.org/abs/2303.04673">EcoOptiGen</a> to support inference parameter tuning and model selection.</p><p>There are many directions of extensions in research and development:</p><ul><li>Generalize the way to provide feedback.</li><li>Automate the process of optimizing the configurations.</li><li>Build adaptive agents for different applications.</li></ul><p><em>Do you find this approach applicable to your use case? Do you have any other challenge to share about LLM applications? Do you like to see more support or research of LLM optimization or automation? Please join our <a href="https://discord.gg/pAbnFJrkgZ">Discord</a> server for discussion.</em></p><h2>For Further Reading</h2><ul><li><a href="/docs/Getting-Started">Documentation</a> about <code>autogen</code> and <a href="https://arxiv.org/abs/2303.04673">Research paper</a>.</li><li><a href="/blog/2023/04/21/LLM-tuning-math">Blog post</a> about a related study for math.</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Does Model and Inference Parameter Matter in LLM Applications? - A Case Study for MATH]]></title>
            <link>https://microsoft.github.io/autogen/blog/2023/04/21/LLM-tuning-math</link>
            <guid>Does Model and Inference Parameter Matter in LLM Applications? - A Case Study for MATH</guid>
            <pubDate>Fri, 21 Apr 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[level 2 algebra]]></description>
            <content:encoded><![CDATA[<p><img src="img/level2algebra.png" alt="level 2 algebra"/></p><p><strong>TL;DR:</strong></p><ul><li><strong>Just by tuning the inference parameters like model, number of responses, temperature etc. without changing any model weights or prompt, the baseline accuracy of untuned gpt-4 can be improved by 20% in high school math competition problems.</strong></li><li><strong>For easy problems, the tuned gpt-3.5-turbo model vastly outperformed untuned gpt-4 in accuracy (e.g., 90% vs. 70%) and cost efficiency. For hard problems, the tuned gpt-4 is much more accurate (e.g., 35% vs. 20%) and less expensive than untuned gpt-4.</strong></li><li><strong>AutoGen can help with model selection, parameter tuning, and cost-saving in LLM applications.</strong></li></ul><p>Large language models (LLMs) are powerful tools that can generate natural language texts for various applications, such as chatbots, summarization, translation, and more. GPT-4 is currently the state of the art LLM in the world. Is model selection irrelevant? What about inference parameters?</p><p>In this blog post, we will explore how model and inference parameter matter in LLM applications, using a case study for <a href="https://datasets-benchmarks-proceedings.neurips.cc/paper/2021/hash/be83ab3ecd0db773eb2dc1b0a17836a1-Abstract-round2.html">MATH</a>, a benchmark for evaluating LLMs on advanced mathematical problem solving. MATH consists of 12K math competition problems from AMC-10, AMC-12 and AIME. Each problem is accompanied by a step-by-step solution.</p><p>We will use AutoGen to automatically find the best model and inference parameter for LLMs on a given task and dataset given an inference budget, using a novel low-cost search &amp; pruning strategy. AutoGen currently supports all the LLMs from OpenAI, such as GPT-3.5 and GPT-4.</p><p>We will use AutoGen to perform model selection and inference parameter tuning. Then we compare the performance and inference cost on solving algebra problems with the untuned gpt-4. We will also analyze how different difficulty levels affect the results.</p><h2>Experiment Setup</h2><p>We use AutoGen to select between the following models with a target inference budget $0.02 per instance:</p><ul><li>gpt-3.5-turbo, a relatively cheap model that powers the popular ChatGPT app</li><li>gpt-4, the state of the art LLM that costs more than 10 times of gpt-3.5-turbo</li></ul><p>We adapt the models using 20 examples in the train set, using the problem statement as the input and generating the solution as the output. We use the following inference parameters:</p><ul><li>temperature: The parameter that controls the randomness of the output text. A higher temperature means more diversity but less coherence. We search for the optimal temperature in the range of <!-- -->[0, 1]<!-- -->.</li><li>top_p: The parameter that controls the probability mass of the output tokens. Only tokens with a cumulative probability less than or equal to top-p are considered. A lower top-p means more diversity but less coherence. We search for the optimal top-p in the range of <!-- -->[0, 1]<!-- -->.</li><li>max_tokens: The maximum number of tokens that can be generated for each output. We search for the optimal max length in the range of <!-- -->[50, 1000]<!-- -->.</li><li>n: The number of responses to generate. We search for the optimal n in the range of <!-- -->[1, 100]<!-- -->.</li><li>prompt: We use the template: &quot;{problem} Solve the problem carefully. Simplify your answer as much as possible. Put the final answer in <!-- -->\<!-- -->boxed{{}}.&quot; where {problem} will be replaced by the math problem instance.</li></ul><p>In this experiment, when n &gt; 1, we find the answer with highest votes among all the responses and then select it as the final answer to compare with the ground truth. For example, if n = 5 and 3 of the responses contain a final answer 301 while 2 of the responses contain a final answer 159, we choose 301 as the final answer. This can help with resolving potential errors due to randomness. We use the average accuracy and average inference cost as the metric to evaluate the performance over a dataset. The inference cost of a particular instance is measured by the price per 1K tokens and the number of tokens consumed.</p><h2>Experiment Results</h2><p>The first figure in this blog post shows the average accuracy and average inference cost of each configuration on the level 2 Algebra test set.</p><p>Surprisingly, the tuned gpt-3.5-turbo model is selected as a better model and it vastly outperforms untuned gpt-4 in accuracy (92% vs. 70%) with equal or 2.5 times higher inference budget.
The same observation can be obtained on the level 3 Algebra test set.</p><p><img src="img/level3algebra.png" alt="level 3 algebra"/></p><p>However, the selected model changes on level 4 Algebra.</p><p><img src="img/level4algebra.png" alt="level 4 algebra"/></p><p>This time gpt-4 is selected as the best model. The tuned gpt-4 achieves much higher accuracy (56% vs. 44%) and lower cost than the untuned gpt-4.
On level 5 the result is similar.</p><p><img src="img/level5algebra.png" alt="level 5 algebra"/></p><p>We can see that AutoGen has found different optimal model and inference parameters for each subset of a particular level, which shows that these parameters matter in cost-sensitive LLM applications and need to be carefully tuned or adapted.</p><p>An example notebook to run these experiments can be found at: <a href="https://github.com/microsoft/FLAML/blob/v1.2.1/notebook/autogen_chatgpt.ipynb">https://github.com/microsoft/FLAML/blob/v1.2.1/notebook/autogen_chatgpt.ipynb</a>. The experiments were run when AutoGen was a subpackage in FLAML.</p><h2>Analysis and Discussion</h2><p>While gpt-3.5-turbo demonstrates competitive accuracy with voted answers in relatively easy algebra problems under the same inference budget, gpt-4 is a better choice for the most difficult problems. In general, through parameter tuning and model selection, we can identify the opportunity to save the expensive model for more challenging tasks, and improve the overall effectiveness of a budget-constrained system.</p><p>There are many other alternative ways of solving math problems, which we have not covered in this blog post. When there are choices beyond the inference parameters, they can be generally tuned via <a href="https://microsoft.github.io/FLAML/docs/Use-Cases/Tune-User-Defined-Function"><code>flaml.tune</code></a>.</p><p>The need for model selection, parameter tuning and cost saving is not specific to the math problems. The <a href="https://github.com/Significant-Gravitas/Auto-GPT">Auto-GPT</a> project is an example where high cost can easily prevent a generic complex task to be accomplished as it needs many LLM inference calls.</p><h2>For Further Reading</h2><ul><li><a href="https://arxiv.org/abs/2303.04673">Research paper about the tuning technique</a></li><li><a href="/docs/Use-Cases/enhanced_inference">Documentation about inference tuning</a></li></ul><p><em>Do you have any experience to share about LLM applications? Do you like to see more support or research of LLM optimization or automation? Please join our <a href="https://discord.gg/pAbnFJrkgZ">Discord</a> server for discussion.</em></p>]]></content:encoded>
        </item>
    </channel>
</rss>