"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4044],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(7294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(r),h=l,d=m["".concat(s,".").concat(h)]||m[h]||c[h]||a;return r?n.createElement(d,o(o({ref:t},u),{},{components:r})):n.createElement(d,o({ref:t},u))}));function h(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=r.length,o=new Array(a);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4593:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=r(7462),l=(r(7294),r(3905));const a={sidebar_label:"math_utils",title:"math_utils"},o=void 0,i={unversionedId:"reference/math_utils",id:"reference/math_utils",isDocsHomePage:!1,title:"math_utils",description:"solve\\_problem",source:"@site/docs/reference/math_utils.md",sourceDirName:"reference",slug:"/reference/math_utils",permalink:"/autogen/docs/reference/math_utils",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/math_utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"math_utils",title:"math_utils"},sidebar:"referenceSideBar",previous:{title:"code_utils",permalink:"/autogen/docs/reference/code_utils"},next:{title:"retrieve_utils",permalink:"/autogen/docs/reference/retrieve_utils"}},s=[{value:"solve_problem",id:"solve_problem",children:[],level:4},{value:"remove_boxed",id:"remove_boxed",children:[],level:4},{value:"last_boxed_only_string",id:"last_boxed_only_string",children:[],level:4},{value:"is_equiv",id:"is_equiv",children:[],level:4},{value:"is_equiv_chain_of_thought",id:"is_equiv_chain_of_thought",children:[],level:4},{value:"eval_math_responses",id:"eval_math_responses",children:[],level:4}],p={toc:s};function u(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"solve_problem"},"solve","_","problem"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def solve_problem(problem: str, **config) -> str\n")),(0,l.kt)("p",null,"(Experimental) Solve the math problem."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"problem")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The problem statement."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"config")," ",(0,l.kt)("em",{parentName:"li"},"Optional, dict")," - The configuration for the API call.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"str")," - The solution to the problem.")),(0,l.kt)("h4",{id:"remove_boxed"},"remove","_","boxed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def remove_boxed(string: str) -> Optional[str]\n")),(0,l.kt)("p",null,"Source: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/hendrycks/math"},"https://github.com/hendrycks/math"),"\nExtract the text within a \\boxed{...} environment."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example"),":"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},'remove_boxed("\\boxed{\\frac{2}{3}}")')),(0,l.kt)("p",null,"  \\frac{2}{3}"),(0,l.kt)("h4",{id:"last_boxed_only_string"},"last","_","boxed","_","only","_","string"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def last_boxed_only_string(string: str) -> Optional[str]\n")),(0,l.kt)("p",null,"Source: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/hendrycks/math"},"https://github.com/hendrycks/math"),"\nExtract the last \\boxed{...} or \\fbox{...} element from a string."),(0,l.kt)("h4",{id:"is_equiv"},"is","_","equiv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def is_equiv(str1: Optional[str], str2: Optional[str]) -> float\n")),(0,l.kt)("p",null,"Returns (as a float) whether two strings containing math are equivalent up to differences of formatting in"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"units"),(0,l.kt)("li",{parentName:"ul"},"fractions"),(0,l.kt)("li",{parentName:"ul"},"square roots"),(0,l.kt)("li",{parentName:"ul"},"superfluous LaTeX.\nSource: ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/hendrycks/math"},"https://github.com/hendrycks/math"))),(0,l.kt)("h4",{id:"is_equiv_chain_of_thought"},"is","_","equiv","_","chain","_","of","_","thought"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def is_equiv_chain_of_thought(str1: str, str2: str) -> float\n")),(0,l.kt)("p",null,"Strips the solution first before calling ",(0,l.kt)("inlineCode",{parentName:"p"},"is_equiv"),"."),(0,l.kt)("h4",{id:"eval_math_responses"},"eval","_","math","_","responses"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def eval_math_responses(responses, solution=None, **args)\n")),(0,l.kt)("p",null,"Select a response for a math problem using voting, and check if the response is correct if the solution is provided."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"responses")," ",(0,l.kt)("em",{parentName:"li"},"list")," - The list of responses."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"solution")," ",(0,l.kt)("em",{parentName:"li"},"str")," - The canonical solution.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dict")," - The success metrics.")))}u.isMDXComponent=!0}}]);