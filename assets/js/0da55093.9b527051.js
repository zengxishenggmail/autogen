"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[171],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},k=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),k=s(n),f=a,c=k["".concat(p,".").concat(f)]||k[f]||u[f]||l;return n?i.createElement(c,o(o({ref:t},m),{},{components:n})):i.createElement(c,o({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=k;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var s=2;s<l;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}k.displayName="MDXCreateElement"},4787:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const l={sidebar_label:"openai_utils",title:"oai.openai_utils"},o=void 0,r={unversionedId:"reference/oai/openai_utils",id:"reference/oai/openai_utils",isDocsHomePage:!1,title:"oai.openai_utils",description:"get\\_key",source:"@site/docs/reference/oai/openai_utils.md",sourceDirName:"reference/oai",slug:"/reference/oai/openai_utils",permalink:"/autogen/docs/reference/oai/openai_utils",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/oai/openai_utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"openai_utils",title:"oai.openai_utils"},sidebar:"referenceSideBar",previous:{title:"completion",permalink:"/autogen/docs/reference/oai/completion"},next:{title:"code_utils",permalink:"/autogen/docs/reference/code_utils"}},p=[{value:"get_key",id:"get_key",children:[],level:4},{value:"get_config_list",id:"get_config_list",children:[],level:4},{value:"config_list_openai_aoai",id:"config_list_openai_aoai",children:[],level:4},{value:"config_list_from_models",id:"config_list_from_models",children:[],level:4},{value:"config_list_gpt4_gpt35",id:"config_list_gpt4_gpt35",children:[],level:4},{value:"filter_config",id:"filter_config",children:[],level:4},{value:"config_list_from_json",id:"config_list_from_json",children:[],level:4},{value:"get_config",id:"get_config",children:[],level:4},{value:"config_list_from_dotenv",id:"config_list_from_dotenv",children:[],level:4}],s={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"get_key"},"get","_","key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_key(config)\n")),(0,a.kt)("p",null,"Get a unique identifier of a configuration."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"config")," ",(0,a.kt)("em",{parentName:"li"},"dict or list")," - A configuration.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tuple")," - A unique identifier which can be used as a key for a dict.")),(0,a.kt)("h4",{id:"get_config_list"},"get","_","config","_","list"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_config_list(api_keys: List,\n                    api_bases: Optional[List] = None,\n                    api_type: Optional[str] = None,\n                    api_version: Optional[str] = None) -> List[Dict]\n")),(0,a.kt)("p",null,"Get a list of configs for openai api calls."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_keys")," ",(0,a.kt)("em",{parentName:"li"},"list")," - The api keys for openai api calls."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_bases")," ",(0,a.kt)("em",{parentName:"li"},"list, optional")," - The api bases for openai api calls."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_type")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The api type for openai api calls."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_version")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The api version for openai api calls.")),(0,a.kt)("h4",{id:"config_list_openai_aoai"},"config","_","list","_","openai","_","aoai"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def config_list_openai_aoai(\n        key_file_path: Optional[str] = ".",\n        openai_api_key_file: Optional[str] = "key_openai.txt",\n        aoai_api_key_file: Optional[str] = "key_aoai.txt",\n        aoai_api_base_file: Optional[str] = "base_aoai.txt",\n        exclude: Optional[str] = None) -> List[Dict]\n')),(0,a.kt)("p",null,"Get a list of configs for openai + azure openai api calls."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key_file_path")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The path to the key files."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"openai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_base_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api base."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"exclude")," ",(0,a.kt)("em",{parentName:"li"},"str, optional"),' - The api type to exclude, "openai" or "aoai".')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - A list of configs for openai api calls.")),(0,a.kt)("h4",{id:"config_list_from_models"},"config","_","list","_","from","_","models"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def config_list_from_models(\n        key_file_path: Optional[str] = ".",\n        openai_api_key_file: Optional[str] = "key_openai.txt",\n        aoai_api_key_file: Optional[str] = "key_aoai.txt",\n        aoai_api_base_file: Optional[str] = "base_aoai.txt",\n        exclude: Optional[str] = None,\n        model_list: Optional[list] = None) -> List[Dict]\n')),(0,a.kt)("p",null,"Get a list of configs for api calls with models in the model list."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key_file_path")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The path to the key files."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"openai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_base_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api base."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"exclude")," ",(0,a.kt)("em",{parentName:"li"},"str, optional"),' - The api type to exclude, "openai" or "aoai".'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"model_list")," ",(0,a.kt)("em",{parentName:"li"},"list, optional")," - The model list.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - A list of configs for openai api calls.")),(0,a.kt)("h4",{id:"config_list_gpt4_gpt35"},"config","_","list","_","gpt4","_","gpt35"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def config_list_gpt4_gpt35(\n        key_file_path: Optional[str] = ".",\n        openai_api_key_file: Optional[str] = "key_openai.txt",\n        aoai_api_key_file: Optional[str] = "key_aoai.txt",\n        aoai_api_base_file: Optional[str] = "base_aoai.txt",\n        exclude: Optional[str] = None) -> List[Dict]\n')),(0,a.kt)("p",null,"Get a list of configs for gpt-4 followed by gpt-3.5 api calls."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key_file_path")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The path to the key files."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"openai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_key_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api key."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aoai_api_base_file")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file name of the azure openai api base."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"exclude")," ",(0,a.kt)("em",{parentName:"li"},"str, optional"),' - The api type to exclude, "openai" or "aoai".')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - A list of configs for openai api calls.")),(0,a.kt)("h4",{id:"filter_config"},"filter","_","config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def filter_config(config_list, filter_dict)\n")),(0,a.kt)("p",null,"Filter the config list by provider and model."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"config_list")," ",(0,a.kt)("em",{parentName:"li"},"list")," - The config list."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"filter_dict")," ",(0,a.kt)("em",{parentName:"li"},"dict, optional")," - The filter dict with keys corresponding to a field in each config,\nand values corresponding to lists of acceptable values for each key.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - The filtered config list.")),(0,a.kt)("h4",{id:"config_list_from_json"},"config","_","list","_","from","_","json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def config_list_from_json(\n    env_or_file: str,\n    file_location: Optional[str] = "",\n    filter_dict: Optional[Dict[str, Union[List[Union[str, None]],\n                                          Set[Union[str, None]]]]] = None\n) -> List[Dict]\n')),(0,a.kt)("p",null,"Get a list of configs from a json parsed from an env variable or a file."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"env_or_file")," ",(0,a.kt)("em",{parentName:"li"},"str")," - The env variable name or file name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"file_location")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The file location."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"filter_dict")," ",(0,a.kt)("em",{parentName:"li"},"dict, optional")," - The filter dict with keys corresponding to a field in each config,\nand values corresponding to lists of acceptable values for each key.\ne.g.,")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'filter_dict = {\n    "api_type": ["open_ai", None],  # None means a missing key is acceptable\n    "model": ["gpt-3.5-turbo", "gpt-4"],\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - A list of configs for openai api calls.")),(0,a.kt)("h4",{id:"get_config"},"get","_","config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_config(api_key: str,\n               api_base: Optional[str] = None,\n               api_type: Optional[str] = None,\n               api_version: Optional[str] = None) -> Dict\n")),(0,a.kt)("p",null,"Construct a configuration dictionary with the provided API configurations.\nAppending the additional configurations to the config only if they're set"),(0,a.kt)("p",null,"example:"),(0,a.kt)("blockquote",null,(0,a.kt)("blockquote",{parentName:"blockquote"},(0,a.kt)("p",{parentName:"blockquote"},'model_api_key_map={\n"gpt-4": "OPENAI_API_KEY",\n"gpt-3.5-turbo": {\n"api_key_env_var": "ANOTHER_API_KEY",\n"api_type": "aoai",\n"api_version": "v2",\n"api_base": "',(0,a.kt)("a",{parentName:"p",href:"https://api.someotherapi.com%22"},'https://api.someotherapi.com"'),"\n}\n}"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_key")," ",(0,a.kt)("em",{parentName:"li"},"str")," - The API key used for authenticating API requests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_base")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The base URL of the API. Defaults to None."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_type")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The type or kind of API. Defaults to None."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"api_version")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The API version. Defaults to None.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Dict")," - A dictionary containing the API configurations.")),(0,a.kt)("h4",{id:"config_list_from_dotenv"},"config","_","list","_","from","_","dotenv"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def config_list_from_dotenv(\n    dotenv_file_path: Optional[str] = None,\n    model_api_key_map: Optional[dict] = None,\n    filter_dict: Optional[dict] = None\n) -> List[Dict[str, Union[str, Set[str]]]]\n")),(0,a.kt)("p",null,"Load API configurations from a specified .env file or environment variables and construct a list of configurations."),(0,a.kt)("p",null,"This function will:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Load API keys from a provided .env file or from existing environment variables."),(0,a.kt)("li",{parentName:"ul"},"Create a configuration dictionary for each model using the API keys and additional configurations."),(0,a.kt)("li",{parentName:"ul"},"Filter and return the configurations based on provided filters.")),(0,a.kt)("p",null,"model_api_key_map will default to ",(0,a.kt)("inlineCode",{parentName:"p"},'{"gpt-4": "OPENAI_API_KEY", "gpt-3.5-turbo": "OPENAI_API_KEY"}')," if none"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"dotenv_file_path")," ",(0,a.kt)("em",{parentName:"li"},"str, optional")," - The path to the .env file. Defaults to None."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"model_api_key_map")," ",(0,a.kt)("em",{parentName:"li"},"str/dict, optional")," - A dictionary mapping models to their API key configurations.\nIf a string is provided as configuration, it is considered as an environment\nvariable name storing the API key.\nIf a dict is provided, it should contain at least 'api_key_env_var' key,\nand optionally other API configurations like 'api_base', 'api_type', and 'api_version'.\nDefaults to a basic map with 'gpt-4' and 'gpt-3.5-turbo' mapped to 'OPENAI_API_KEY'."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"filter_dict")," ",(0,a.kt)("em",{parentName:"li"},"dict, optional")," - A dictionary containing the models to be loaded.\nContaining a 'model' key mapped to a set of model names to be loaded.\nDefaults to None, which loads all found configurations.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  List[Dict[str, Union[str, Set","[str]","]]]: A list of configuration dictionaries for each model."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Raises"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FileNotFoundError")," - If the specified .env file does not exist."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"TypeError")," - If an unsupported type of configuration is provided in model_api_key_map.")))}m.isMDXComponent=!0}}]);